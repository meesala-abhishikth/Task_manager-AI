let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

function saveTasks() {
  localStorage.setItem('tasks', JSON.stringify(tasks));
}

function addTask(name = null, description = null, dueDate = null, priority = null) {
  name = name ?? document.getElementById('taskName').value.trim();
  description = description ?? document.getElementById('description').value.trim();
  dueDate = dueDate ?? document.getElementById('dueDate').value;
  priority = priority ?? document.getElementById('priority').value;

  if (!name) {
    alert('Please enter a task name.');
    return;
  }

  tasks.push({ name, description, dueDate, priority, completed: false });
  saveTasks();
  renderTasks();
  clearForm();
}

function clearForm() {
  document.getElementById('taskName').value = '';
  document.getElementById('description').value = '';
  document.getElementById('dueDate').value = '';
  document.getElementById('priority').value = 'Medium';
}

function renderTasks() {
  const list = document.getElementById('taskList');
  const query = document.getElementById('searchInput').value.toLowerCase();
  const priorityFilter = document.getElementById('priorityFilter').value;
  const statusFilter = document.getElementById('statusFilter').value;
  const sortBy = document.getElementById('sortBy').value;

  let filtered = tasks.filter(task => {
    const matchQuery = task.name.toLowerCase().includes(query) ||
                       task.description.toLowerCase().includes(query);
    const matchPriority = !priorityFilter || task.priority === priorityFilter;
    const matchStatus = !statusFilter ||
                        (statusFilter === 'completed' && task.completed) ||
                        (statusFilter === 'pending' && !task.completed);
    return matchQuery && matchPriority && matchStatus;
  });

  if (sortBy === 'date') {
    filtered.sort((a, b) => new Date(a.dueDate || 0) - new Date(b.dueDate || 0));
  } else if (sortBy === 'priority') {
    const priorityMap = { High: 1, Medium: 2, Low: 3 };
    filtered.sort((a, b) => priorityMap[a.priority] - priorityMap[b.priority]);
  }

  list.innerHTML = '';

  filtered.forEach((task, index) => {
    const now = new Date().toISOString().split('T')[0];
    const isOverdue = task.dueDate && task.dueDate < now && !task.completed;

    const taskDiv = document.createElement('div');
    taskDiv.className = `task-item priority-${task.priority.toLowerCase()} ${task.completed ? 'completed' : ''}`;
    taskDiv.innerHTML = `
      <h3>${task.name}</h3>
      <p>${task.description}</p>
      <div class="task-meta">
        Due: <span class="${isOverdue ? 'overdue' : ''}">${task.dueDate || 'None'}</span> |
        Priority: ${task.priority} |
        Status: ${task.completed ? '✅ Done' : '❌ Pending'}
      </div>
      <div>
        <button class="toggle" onclick="toggleComplete(${index})">${task.completed ? 'Mark Incomplete' : 'Mark Complete'}</button>
        <button class="delete" onclick="deleteTask(${index})">Delete</button>
      </div>
    `;
    list.appendChild(taskDiv);
  });
}

function toggleComplete(index) {
  tasks[index].completed = !tasks[index].completed;
  saveTasks();
  renderTasks();
}

function deleteTask(index) {
  tasks.splice(index, 1);
  saveTasks();
  renderTasks();
}

function handleAI() {
  const input = document.getElementById('aiInput').value.toLowerCase().trim();
  if (!input) {
    alert('Please enter something for the AI to suggest.');
    return;
  }

  let taskSuggestion = { name: '', description: '', priority: 'Medium', dueDate: '' };

  if (input.includes('submit report')) {
    taskSuggestion.name = 'Submit Report';
    taskSuggestion.description = 'Submit the weekly/monthly report';
    taskSuggestion.priority = 'High';
  } else if (input.includes('meeting')) {
    taskSuggestion.name = 'Team Meeting';
    taskSuggestion.description = 'Attend or prepare for the team meeting';
    taskSuggestion.priority = 'Medium';
  } else if (input.includes('email')) {
    taskSuggestion.name = 'Check Email';
    taskSuggestion.description = 'Review important unread emails';
    taskSuggestion.priority = 'Low';
  } else {
    taskSuggestion.name = input;
    taskSuggestion.description = 'Generated by AI';
    taskSuggestion.priority = 'Medium';
  }

  addTask(taskSuggestion.name, taskSuggestion.description, taskSuggestion.dueDate, taskSuggestion.priority);
  document.getElementById('aiInput').value = '';
}

renderTasks();